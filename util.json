{
    "@define": {
        "patch": {
            "@name": "patch",
            "@output": [
                "@multiline",
                "cp -r $source $out",
                "cd $out",
                "for patch in $patches; do",
                "  patch -p1 -i $patch",
                "done"
            ]
        },
        "fetch": {
            "@name": "fetch",
            "@interpreter": "bash",
            "@output": [
                "@multiline",
                "curl -L $url -o archive",
                "mkdir source",
                "if file archive | grep -q \"gzip compressed\"; then",
                "    tar -C source -xf archive",
                "elif file archive | grep -q \"XZ compressed\"; then",
                "    tar -C source -xf archive",
                "elif file archive | grep -q \"Zip archive\"; then",
                "    unzip -qd source archive",
                "else",
                "    echo \"Unknown archive format\"",
                "    exit 1",
                "fi",
                "entries=( source/* )",
                "mkdir -p $out",
                "if [ ${#entries[@]} -eq 1 ] && [ -d \"${entries[0]}\" ]; then",
                "    cp -va \"${entries[0]}/.\" $out",
                "else",
                "    cp -va source \"$out/\"",
                "fi"
            ]
        },
        "merge": {
            "@name": "merge",
            "@output": [
                "@multiline",
                "mkdir -p \"$out/$prefix\"",
                "",
                "for src in $paths; do",
                "    [ -d \"$src\" ] || continue",
                "",
                "    find \"$src\" -type f -o -type l | while read -r file; do",
                "        rel=\"${file#$src/}\"",
                "        dest=\"$out/$prefix/$rel\"",
                "",
                "        mkdir -p \"$(dirname \"$dest\")\"",
                "",
                "        if [ ! -e \"$dest\" ]; then",
                "            # Compute relative path from $dest to $file",
                "            link_target=\"$(realpath --relative-to=\"$(dirname \"$dest\")\" \"$file\")\"",
                "            ln -s \"$link_target\" \"$dest\"",
                "        fi",
                "    done",
                "done"
            ]
        }
    }
}